#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "base_particle_script.glsl"

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1 ) in;

layout(push_constant) uniform Push_constants {
	vec4 parent_velocity;
	vec4 position;
	vec4 rotation_quat;
	Random_vec4 direction;

	vec2 size;

	Random_float ttl;
	Random_float velocity;

	uint direction_flags; // 0x1 : independent; 0x2 : normal distribution

	uint offset;
	uint to_spawn;
	uint base_seed;
	uint feedback_buffer_id;
	float timestep;
} emitter_cfg;

void main() {
	uint invId = gl_GlobalInvocationID.x;

	if(invId < emitter_cfg.to_spawn) {
		uint index = emitter_cfg.offset + invId;

		uint seed = hash(uvec2(emitter_cfg.base_seed, index));
		vec2 r01 = normal_rand(seed, 0, 1);

		float rand_ttl = rand_float(emitter_cfg.ttl, r01[0]);
		float rand_vel = rand_float(emitter_cfg.velocity, r01[1])*0.5 + 0.5;

		pout.particles[index].position.w = rand_ttl;
		pout.particles[index].velocity.w = rand_ttl;
		pout.particles[index].data = uvec4(emitter_cfg.feedback_buffer_id, seed, 0, floatBitsToUint(0));

		vec2 dir_mean_factor = vec2(0.5*3.14159265359, 2.0*3.14159265359);

		bool dir_normal_distr = (emitter_cfg.direction_flags & 2) != 0;
		vec2 r23 = dir_normal_distr ? normal_rand(seed, 2, 3) : uniform_rand(seed, 2,3)*2-1;
		vec3 dir = quaternion_rotate(rand_dir(emitter_cfg.direction.mean.xy*dir_mean_factor,
		                                      emitter_cfg.direction.stddev.xy,
		                                      r23),
		                             emitter_cfg.rotation_quat);

		vec3 vel_dir = dir;
		if((emitter_cfg.direction_flags & 1) != 0) {
			vec2 r45 = dir_normal_distr ? normal_rand(seed, 4, 5) : uniform_rand(seed, 4, 5)*2-1;
			vel_dir = quaternion_rotate(rand_dir(emitter_cfg.direction.mean.zw*dir_mean_factor,
			                                     emitter_cfg.direction.stddev.zw,
			                                     r45),
			                            emitter_cfg.rotation_quat);
		}

		float r = mix(emitter_cfg.size[0], emitter_cfg.size[1], uniform_rand(seed, 6));
		vec3 pos = emitter_cfg.position.xyz + dir*r;
		vec3 velocity = vel_dir*rand_vel + emitter_cfg.parent_velocity.xyz;

		// single euler step to distribute particles more evenly with bigger delta-times
		pos += velocity * emitter_cfg.timestep*(float(invId)/float(emitter_cfg.to_spawn));

		pout.particles[index].position.xyz = pos;
		pout.particles[index].velocity.xyz = velocity;


	}
}
