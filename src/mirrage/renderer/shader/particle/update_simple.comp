#version 450
#extension GL_ARB_separate_shader_objects : enable


layout (local_size_x = 32, local_size_y = 1, local_size_z = 1 ) in;

struct Particle {
	vec3 position;
	float ttl;
	vec3 velocity;
	float seed;
};

layout(std430, set=1, binding = 0) buffer ParticleDataIn {
	int count;
	Particle particles[];
} pin;

layout(std430, set=1, binding = 1) buffer ParticleDataOut {
	int count;
	Particle particles[];
} pout;

struct Effector {
	vec3 force_dir;
	float force;
	vec3 position;
	float distance_decay;
};

layout(std430, set=2, binding = 0) buffer EffectorData {
	int count;
	Effector effectors[];
};

struct Random_vec4 {
	vec4 median_hsva;
	vec4 variance_hsva;
};
struct Random_float {
	float median;
	float variance;
};


layout(std140, set=1, binding = 1) uniform Config {
	Random_vec4 color; // hsva
	Random_vec4 color_change;

	Random_vec4 size;
	Random_vec4 size_change;

	Random_float sprite_rotation;
	Random_float sprite_rotation_change;

	Random_float ttl;

	Random_float velocity;

	float drag;
	float parent_velocity;
} config;
// TODO:

// TODO: required
layout(push_constant) uniform Push_constants {
	vec4 position;
	vec4 rotation; // quat
	int  to_spawn;
} pcs;

#include "../global_uniforms.glsl"

//shared float todo?;


void main() {
	// calculate constants and initialize shared memory
	uint local_id = gl_LocalInvocationID.x + gl_LocalInvocationID.y*gl_WorkGroupSize.x;
	uint local_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;

	//memoryBarrierShared();
	//barrier();

	//atomicAdd(total, sub_total);
	//barrier();

	//if(local_id==0)


	// TODO
}
