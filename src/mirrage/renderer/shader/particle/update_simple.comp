#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "base_particle_script.glsl"

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std140, set=1, binding = 0) readonly buffer Particle_type_config {
	PARTICLE_TYPE_CONFIG
} particle_config;


layout(push_constant) uniform Push_constants {
	float timestep;
	uint particle_read_offset;
	uint particle_read_count;

	uint effector_count;
	uint effector_offset;
} update_cfg;


vec3 calc_size(uint keyframe_a, uint keyframe_b, float t, vec3 rand) {
	return mix(rand_xyz(particle_config.keyframes[keyframe_a].size, rand),
	           rand_xyz(particle_config.keyframes[keyframe_b].size, rand),
	           t);
}

vec3 calc_effector_force(uint effector_idx, vec3 p, float inv_mass, float mass_sign) {
	vec3  p_diff = shared_uniforms.effectors[effector_idx].position.xyz - p;
	float dist   = length(p_diff);

	vec3 dir = shared_uniforms.effectors[effector_idx].force_dir.xyz;
	if(dot(dir,dir) < 0.000001 && dist>0.000001) {
		dir = p_diff / dist;
	} else {
		dir = normalize(dir);
	}

	float force = shared_uniforms.effectors[effector_idx].force;

	// distance decay
	if(shared_uniforms.effectors[effector_idx].distance_decay > 0)
		force /= pow(dist, shared_uniforms.effectors[effector_idx].distance_decay);

	float accel = mix(force, force*inv_mass, shared_uniforms.effectors[effector_idx].mass_scale);
	if(mass_sign<0) {
		accel *= mass_sign * shared_uniforms.effectors[effector_idx].negative_mass_scale;
	}

	return clamp(accel, -30, 30) * dir;
}

void main() {
	uint offset = gl_GlobalInvocationID.x;

	if(offset < update_cfg.particle_read_count) {
		uint index = offset + update_cfg.particle_read_offset;

		vec2 ttl = vec2(pin.particles[index].position.w, pin.particles[index].velocity.w);
		ttl[0] -= update_cfg.timestep;

		if(ttl[0] <= 0) {
			// dead => drop data
		} else {
			const float dt = update_cfg.timestep;

			uint seed = pin.particles[index].data.y;

			// incr count and get output index
			uint old_feedback_index = pin.particles[index].data.x;
			uint feedback_index = feedback_mapping.new_feedback_index[old_feedback_index];
			uint out_offset = atomicAdd(feedback.ranges[feedback_index].count, 1);
			uint out_index = out_offset + feedback.ranges[feedback_index].offset;

			// update keyframe
			// TODO: particle_config.loop_keyframe_time
			float age = ttl[1] - ttl[0];
			uint keyframe = pin.particles[index].data.z;
			if(particle_config.loop_keyframe_time>0) {
				keyframe = 0;
				age = mod(age, particle_config.loop_keyframe_time);
			}

			for(uint i=keyframe+1; i<particle_config.keyframe_count-1; i++) {
				if(particle_config.keyframes[i].time > age) {
					keyframe = i - 1;
					break;
				}
			}

			uint keyframe_b = min(keyframe+1, particle_config.keyframe_count-1);

			float time_a = particle_config.keyframes[keyframe].time;
			float time_b = particle_config.keyframes[keyframe_b].time;

			float time_diff = time_b - time_a;
			float keyframe_t = time_diff>0.0 ? clamp((age - time_a) / time_diff, 0.0, 1.0) : 0.0;

			// update position / velocity
			vec3 position = pin.particles[index].position.xyz;
			vec3 velocity = pin.particles[index].velocity.xyz;
			velocity *= (1.0 - dt*mix(particle_config.keyframes[keyframe].drag,
			                          particle_config.keyframes[keyframe_b].drag,
			                          keyframe_t));

			// apply effectors
			vec2 uniform_shared = uniform_rand(seed, 22, 23);
			vec2 uniform_size   = uniform_rand(seed, 24, 25);
			vec2 normal_shared  = uniform_to_normal_rand(uniform_shared);
			vec2 normal_size    = uniform_to_normal_rand(uniform_size);

			vec3 size_rand;
			size_rand.x = (particle_config.normal_distribution_flags & 16)!=0 ? normal_shared.y
			                                                                  : uniform_shared.y*2-1;
			size_rand.y = (particle_config.normal_distribution_flags & 32)!=0 ? normal_size.x
			                                                                  : uniform_size.x*2-1;
			size_rand.z = (particle_config.normal_distribution_flags & 64)!=0 ? normal_size.x
			                                                                  : uniform_size.x*2-1;

			vec3 size = calc_size(keyframe, keyframe_b, keyframe_t, size_rand);
			if((particle_config.flags&4)!=0)
				size.y = size.z = size.x;
			float volumn = size.x * size.y * size.z;

			float mass = mix(particle_config.keyframes[keyframe].base_mass,
			                 particle_config.keyframes[keyframe_b].base_mass,
			                 keyframe_t);

			mass += volumn * mix(particle_config.keyframes[keyframe].density,
			                     particle_config.keyframes[keyframe_b].density,
			                     keyframe_t);

			float inv_mass = mass>0.0000001 ? abs(1.0/mass) : 0.0;
			float mass_sign = mass<0 ? -1.0 : 1.0;

			for(uint i=0; i<shared_uniforms.global_effector_count; i++) {
				velocity += dt * calc_effector_force(i, position, inv_mass, mass_sign);
			}
			for(uint i=0; i<update_cfg.effector_count; i++) {
				velocity += dt * calc_effector_force(i+update_cfg.effector_offset, position, inv_mass, mass_sign);
			}

			pout.particles[out_index].position.xyz = position + velocity * dt;
			pout.particles[out_index].velocity.xyz = velocity;

			pout.particles[out_index].position.w = ttl.x;
			pout.particles[out_index].velocity.w = ttl.y;
			pout.particles[out_index].data = uvec4(feedback_index, seed,
			                                       keyframe, floatBitsToUint(keyframe_t));
		}
	}
}
