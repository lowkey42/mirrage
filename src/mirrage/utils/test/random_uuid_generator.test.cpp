#include <mirrage/utils/random_uuid_generator.hpp>

#include <doctest.h>

#include <algorithm>
#include <cctype>
#include <iterator>
#include <sstream>
#include <vector>

TEST_CASE("A large number of ids generated by a random_uuid_generator does contain no duplicates.")
{
	mirrage::util::random_uuid_generator gen;
	std::vector<decltype(gen)::id_type>  ids;
	std::generate_n(std::back_inserter(ids), 1 << 15, [&]() { return gen.generate_id(); });
	std::sort(ids.begin(), ids.end());
	CHECK(std::adjacent_find(ids.begin(), ids.end()) == ids.end());
}

TEST_CASE(
        "A large number of ids generated by two different random_uuid_generators does contain no duplicates.")
{
	mirrage::util::random_uuid_generator gen1;
	decltype(gen1)                       gen2;
	std::vector<decltype(gen1)::id_type> ids;
	std::generate_n(std::back_inserter(ids), 1 << 14, [&]() { return gen1.generate_id(); });
	std::generate_n(std::back_inserter(ids), 1 << 14, [&]() { return gen2.generate_id(); });
	std::sort(ids.begin(), ids.end());
	CHECK(std::adjacent_find(ids.begin(), ids.end()) == ids.end());
}

TEST_CASE("A copy of an random_uuid_generator produces the same ids.")
{
	mirrage::util::random_uuid_generator gen1;
	auto                                 gen2 = gen1;
	std::vector<decltype(gen1)::id_type> ids1;
	std::vector<decltype(gen1)::id_type> ids2;
	std::generate_n(std::back_inserter(ids1), 1 << 14, [&]() { return gen1.generate_id(); });
	std::generate_n(std::back_inserter(ids2), 1 << 14, [&]() { return gen2.generate_id(); });
	CHECK(std::equal(ids1.begin(), ids1.end(), ids2.begin(), ids2.end()));
}

TEST_CASE("An id generated by a random_uuid_generator has the expected format.")
{
	mirrage::util::random_uuid_generator gen;
	auto                                 id  = gen.generate_id();
	auto                                 var = id.variant();
	auto                                 ver = id.version();
	CHECK(var == 0b10);
	CHECK(ver == 4);
	std::stringstream outstr;
	outstr << id;
	auto        str   = outstr.str();
	std::size_t index = 0;

	auto check_hex_block = [&str, &index](std::size_t bs) {
		for(std::size_t i = 0; i < bs; ++i, ++index) {
			CHECK(std::isxdigit(str.at(index)));
		}
	};
	check_hex_block(8);
	CHECK(str.at(index++) == '-');
	check_hex_block(4);
	CHECK(str.at(index++) == '-');
	check_hex_block(4);
	CHECK(str.at(index++) == '-');
	check_hex_block(4);
	CHECK(str.at(index++) == '-');
	check_hex_block(12);
}
